generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Website {
  id             String          @id @default(cuid())
  name           String
  identifier     String          @unique
  phone          String?
  logo           String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  questionnaires Questionnaire[]
}

model Questionnaire {
  id          String     @id @default(cuid())
  title       String
  description String?
  isActive    Boolean    @default(true)
  websiteId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  steps       QuestionnaireStep[]
  website     Website    @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  responses   Response[]
}

model QuestionnaireStep {
  id                  String        @id @default(cuid())
  questionnaireId     String
  title               String
  description         String?
  order               Int
  isActive            Boolean       @default(true)
  leaveBehindStrategy Boolean       @default(false)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  questionnaire       Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  questions           StepQuestion[]
}

model StepQuestion {
  id                  String            @id @default(cuid())
  stepId              String
  question            String            // Duplicated question text
  questionType        String            @default("options") // "options", "date", "text", "textarea"
  displayType         String            @default("list") // "list" or "cards"
  isMultiSelect       Boolean           @default(false)
  isRequired          Boolean           @default(false) // Can be different from question bank
  validationRules     Json?             // Duplicated validation rules
  order               Int
  isActive            Boolean           @default(true)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  step                QuestionnaireStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  options             StepQuestionOption[]
  questionBankId      String?           // Reference to original question (optional)
  questionBank        QuestionBank?     @relation(fields: [questionBankId], references: [id])
}

model Response {
  id              String        @id @default(cuid())
  questionnaireId String
  answers         Json
  createdAt       DateTime      @default(now())
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
}

model QuestionBank {
  id            String           @id @default(cuid())
  question      String
  displayType   String           @default("list")
  isMultiSelect Boolean          @default(false)
  isActive      Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  questionType  String           @default("options")
  validationRules Json?          // Store validation rules as JSON
  options       QuestionOption[]
  stepQuestions StepQuestion[]
}

model QuestionOption {
  id             String       @id @default(cuid())
  questionBankId String
  description    String
  image          String?
  order          Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  questionBank   QuestionBank @relation(fields: [questionBankId], references: [id], onDelete: Cascade)
}

model StepQuestionOption {
  id              String        @id @default(cuid())
  stepQuestionId  String
  description     String
  image           String?
  order           Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  stepQuestion    StepQuestion  @relation(fields: [stepQuestionId], references: [id], onDelete: Cascade)
}
